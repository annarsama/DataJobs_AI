import streamlit as st
import pandas as pd
import plotly.express as px
import sqlite3
import json


from streamlit_option_menu import option_menu
from langchain.llms import HuggingFaceHub
from langchain.sql_database import SQLDatabase

import warnings
warnings.filterwarnings('ignore')

from llm_query import SQLquery2, chat_response_generation

# Cr√©ation d'une barre lat√©rale "Main Menu" pour naviguer entre les diff√©rentes pages de l'application :
with st.sidebar:
    mainmenu = option_menu("üìç Main Menu", 
                           ['üè† Information','üìä Tableau de Bord', 'ü§ñ Les offres','ü§ñ Q/Abot', 'R√®gles d\'utilisation IA'], # diff√©rentes pages de l'application
                           default_index=0) # par d√©faut, la premi√®re page s'affiche

# Cl√© √† entrer dans le menu lat√©ral pour se connecter √† l'API de HuggingFace :    
hf_api_key = st.sidebar.text_input('Cl√© API HuggingFace', type='password') 


conn = sqlite3.connect('joboffers_dw.db') # connexion √† une base de donn√©es SQL cr√©√©e pr√©alablement

# Si la page "üè† Information" est cliqu√©e :  
if mainmenu == 'üè† Information':
    st.title(":red[Offres d'Emploi en Data Science]")
    st.divider()
    st.header('Bienvenue sur cette super application !')
    st.subheader('_Ici, venez plonger dans un monde de donn√©es o√π les offres d\'emploi en data science pleuvent._')
    container = st.container(border=True)
    container.write(""":red[**Information :**] Cette application a √©t√© cr√©√©e dans le cadre d'un projet de groupe √† _l'Universit√©
                    Lumi√®re Lyon 2_, pour le cours de :red[_text mining_] supervis√© par **Ricco RAKOTOMALALA**. L'application a √©t√© 
                    cr√©√©e par **Naomi KALDJOB**, **Annabelle NARSAMA**, et **Clovis VARANGOT-REILLE**, √©tudiants dans le Master 2
                    Statistiques et Informatique pour la Science des donn√âes (SISE). Cette application permet ainsi d'afficher 
                    diff√©rentes informations li√©es aux offres d'emploi en :red[data]. Elle inclue des graphiques repr√©sentant les offres, les diff√©rentes offres avec un chatbot pour communiquer avec ainsi
                    qu'un Q/Abot pour poser des questions √† notre base d'information.
                    """)
    st.divider()
    st.image('logo_dalle.png', caption='Dall-E 2: Create a single logo featuring the stylized red abstract brain intertwined with binary code, based on the left image of the previous set. The logo should be isolated on a plain white background. This logo retains the detailed brain with visible lobes and neural connections, with binary code dynamically interwoven. The singular focus on one logo against a white background will highlight its modern, sleek design, making it well-suited for a data science job offer application.')
    st.divider()
    st.caption('_Made by Naomi Kaljob (https://github.com/naomi-kaldjob), Annabelle Narsama (https://github.com/annarsama), & Clovis Varangot-Reille (https://github.com/cvarrei)_')

# Si la page "üìä Tableau de Bord" est cliqu√©e :
elif mainmenu == 'üìä Tableau de Bord':
    st.title('üìä :red[Tableau de Bord]')
    st.divider()
    st.header('Bienvenue sur le tableau de bord !')
    st.subheader('_Voici quelques chiffres et graphiques en lien avec les offres d\'emploi en data science._')
    # Cr√©ation d'onglets dans la page (l'ordre des noms d'onglets est important) :
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["Offres", "Salaire", "Contrats", 
                                                        "Exp√©rience", "Cartographie", "Wordcloud"])

    # Onglet 1 - Offres :
    with tab1: 
        # Requ√™te sur le nombre de profils group√© par poste (ici "titre")
        requete = """SELECT COUNT(profil) as Nombre, titre as Offres FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        GROUP BY Offres 
        ORDER BY Nombre DESC;"""
        position = pd.read_sql_query(requete, conn) # transformation de la requ√™te en df

        jobs = ["Data analyst", "Data scientist", "Data engineer", "Data manager", "Data steward", "Ml engineer"]

        job = st.selectbox("**_Quel poste souhaitez-vous afficher pour l'onglet 'Offres' ?_**", jobs)
        st.subheader(f'**_Global_**')
        st.write("""**_Ici, vous pouvez retrouver le nombre total d'offres, ainsi que le nombre d'offres par 
                 pays selon le poste s√©lectionn√©._**""")
        container = st.container(border=True)
        col1, col2 = container.columns([2, 3]) # cr√©ation de 2 colonnes de tailles diff√©rentes

        # Colonne 1 :
        with col1:
            st.write(":red[**_Nombre total d'offres_**]")
            # Requ√™te sur le nombre d'offres :
            query = """SELECT COUNT(titre) as Offres FROM f_offres 
               INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
               ORDER BY Offres DESC;"""
            world = pd.read_sql_query(query, conn) # transformation de la requ√™te en df
            st.dataframe(world, hide_index=True, use_container_width=True) # affichage du df

        # Colonne 2 :   
        with col2:
            st.write(f":red[**_Nombre d‚Äôoffres de {job.lower()} par pays_**]")
            # Requ√™te sur le nombre d'offres par pays selon le poste s√©lectionn√© par l'utilisateur :
            query = f"""SELECT COUNT(titre) as Offres, pays as Pays FROM f_offres 
            INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
            INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
            WHERE titre LIKE "%{job}%" 
            GROUP BY pays 
            ORDER BY Offres DESC;"""
            europe = pd.read_sql_query(query, conn)
            st.dataframe(europe, hide_index=True, use_container_width=True)
        st.divider()

        st.subheader(f'**_Postes de {job.lower()} par r√©gion_**')
        st.write('**_Ici, vous pouvez retrouver le nombre d\'offres par r√©gion selon le poste s√©lectionn√©._**')
        container = st.container(border=True)
        container.write(f':red[**_Nombre d\'offres de {job.lower()} par r√©gion_**]')
        # Requ√™te sur le nombre d'offres par r√©gion selon le poste s√©lectionn√© par l'user :
        query = f"""SELECT COUNT(titre) as Offers, nom_region as Region FROM f_offres 
        INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        WHERE titre LIKE "%{job}%"
        GROUP BY nom_region 
        ORDER BY Offers DESC;"""
        region = pd.read_sql_query(query, conn)
        custom_colors = ['#900C3F']
        # Barplot de la requ√™te :
        fig=px.bar(region, 
                   x='Offers', y='Region', 
                   orientation='h', 
                   color_discrete_sequence=custom_colors, 
                   width=600, height=600)
        container.write(fig) # affichage du barplot dans l'application
        st.divider()

        st.subheader(f'**_Postes de {job.lower()} par d√©partement_**')
        st.write('**_Ici, vous pouvez retrouver le nombre d\'offres par d√©partement selon le poste s√©lectionn√©._**')
        container = st.container(border=True)
        container.write(f':red[**_Nombre d\'offres de {job.lower()} par d√©partement_**]')
        # Requ√™te sur le nombre d'offres par d√©partement selon le poste s√©lectionn√© par l'utilisateur :
        query = f"""SELECT COUNT(titre) as Offers, nom_departement as Department FROM f_offres 
        INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        WHERE titre LIKE "%{job}%"
        GROUP BY nom_departement 
        ORDER BY Offers DESC;"""
        departement = pd.read_sql_query(query, conn)
        dep_names = departement['Department']
        custom_colors = ['#FFA07A']
        fig=px.bar(departement, 
                   x='Offers', y='Department', 
                   orientation='h', 
                   color_discrete_sequence=custom_colors, 
                   width=600, height=600)
        container.write(fig)
    
    # Onglet 2 - Salaire :
    with tab2:
        requete = """SELECT COUNT(profil) as Nombre, titre as Offres FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        GROUP BY Offres 
        ORDER BY Nombre DESC;"""
        position = pd.read_sql_query(requete, conn)
        jobs = ["Data analyst", "Data scientist", "Data engineer", "Data manager"]

        job = st.selectbox("**_Quel poste souhaitez-vous afficher pour l'onglet 'Salaire' ?_**", jobs)
        st.caption("""_Certaines offres n'affichent aucun salaire, il est donc possible que 
                   certaines valeurs soient manquantes et soient marqu√©es comme telle._ Nous avons gard√© les m√©tiers o√π nous avions suffisament d'information sur le salaire.""")
        st.subheader('**_Global_**')
        st.write('**_Ici, vous pouvez retrouver les salaires moyens, global, et par pays selon le poste s√©lectionn√©._**')
        container = st.container(border=True)
        col1, col2 = container.columns([2,3])
        with col1:
            st.write(':red[**_Salaire moyen global_**]')
            # Requ√™te sur le salaire moyen global :
            query = """SELECT AVG(salaire_moyen) as Salaire FROM f_offres 
            INNER JOIN d_salaire ON f_offres.id_salaire = d_salaire.id_salaire;"""
            salaire = pd.read_sql_query(query, conn)
            st.dataframe(salaire, hide_index=True, use_container_width=True)

        with col2:
            st.write(f':red[**_Salaire moyen pour le poste de {job.lower()} par pays (si disponible)_**]')
            # Requ√™te sur le salaire moyen par pays selon le poste s√©lectionn√© par l'utilisateur :
            query = f"""SELECT AVG(salaire_moyen) as Salaire, pays as Pays FROM f_offres 
            INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
            INNER JOIN d_salaire ON f_offres.id_salaire = d_salaire.id_salaire 
            INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
            WHERE titre LIKE "%{job}%"
            GROUP BY pays 
            ORDER BY Salaire DESC;"""
            salaire_pays = pd.read_sql_query(query, conn)
            st.dataframe(salaire_pays.fillna("Manquante"), # on remplace les valeurs manquantes de Salaire par pays par "Manquante"
                         hide_index=True, use_container_width=True)
        st.divider()

        st.subheader(f"**_Salaire moyen d'un {job.lower()} par r√©gion_**")
        st.write("""**_Ici sont pr√©sent√©s les r√©gions avec les meilleurs salaires, ainsi que les salaires moyens par r√©gion, 
                 le tout selon le poste s√©lectionn√©._**""")
        container = st.container(border=True)
        col1, col2 = container.columns([2,3])
        with col1:
            # L'utilisateur peut choisir le nombre de r√©gion √† afficher :
            box = st.selectbox(f'**Choisissez le nombre de r√©gions √† afficher pour les meilleurs salaires en tant que {job.lower()} :**', 
                               range(3, 20))
        with col2:
            st.write(f':red[**_Les {box} meilleures r√©gions_**]')
            # Requ√™te sur le salaire moyen par r√©gion selon le poste s√©lectionn√© par l'utilisateur :
                # le salaire doit √™tre compris entre 10000 et 150000 (sinon, pas de pertinence)
            query = f"""SELECT AVG(salaire_moyen) as Salaire, nom_region as Region FROM f_offres 
            INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
            INNER JOIN d_salaire ON f_offres.id_salaire = d_salaire.id_salaire 
            INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
            WHERE titre LIKE "%{job}%"
            GROUP BY nom_region 
            HAVING Salaire < 150000 AND Salaire > 10000
            ORDER BY Salaire DESC;"""
            salaire_region = pd.read_sql_query(query, conn)
            top_region = salaire_region.head(box) # df cr√©√© en fonction du nombre de r√©gions √† afficher
            st.dataframe(top_region, hide_index=True, use_container_width=True)
        container.divider()
        query = f"""SELECT AVG(salaire_moyen) as Salaire, nom_region as Region FROM f_offres 
        INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
        INNER JOIN d_salaire ON f_offres.id_salaire = d_salaire.id_salaire 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres  
        WHERE titre LIKE "%{job}%"
        GROUP BY nom_region 
        HAVING Salaire < 150000 AND Salaire > 10000
        ORDER BY Salaire DESC;"""
        salaire_region = pd.read_sql_query(query, conn)
        container.write(f":red[**_Salaire moyen d'un {job.lower()} par r√©gion_**]")
        # Histogramme de la requ√™te :
        container.bar_chart(data=salaire_region, 
                            x='Region', y='Salaire', 
                            color='#900C3F', 
                            use_container_width=True)
        st.divider()

        st.subheader(f"**_Salaire moyen d'un {job.lower()} par d√©partement_**")
        st.write("""**_Ici sont pr√©sent√©s les d√©partements avec les meilleurs salaires, 
                 ainsi que les salaires moyens par d√©partement, le tout selon le poste s√©lectionn√©._**""")
        container = st.container(border=True)
        col1, col2 = container.columns([2,3])
        with col1:
            box = st.selectbox(f'**Choisissez le nombre de d√©partements √† afficher pour les meilleurs salaires en tant que {job.lower()} :**', 
                               range(5, 100))
        with col2:
            st.write(f':red[**_Les {box} meilleurs d√©partements_**]')
            # Requ√™te sur le salaire moyen par d√©partement pour le poste s√©lectionn√© par l'utilisateur :
                # le salaire doit √™tre compris entre 10000 et 150000
            query = f"""SELECT AVG(salaire_moyen) as Salaire, nom_departement as Departement FROM f_offres 
            INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
            INNER JOIN d_salaire ON f_offres.id_salaire = d_salaire.id_salaire 
            INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres  
            WHERE titre LIKE "%{job}%"
            GROUP BY nom_departement 
            HAVING Salaire < 150000 AND Salaire > 10000
            ORDER BY Salaire DESC;"""
            salaire_dep = pd.read_sql_query(query, conn)
            top_dep = salaire_dep.head(box)
            st.dataframe(top_dep, hide_index=True, use_container_width=True)
        container.divider()
        query = f"""SELECT AVG(salaire_moyen) as Salaire, nom_departement as Departement FROM f_offres 
        INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
        INNER JOIN d_salaire ON f_offres.id_salaire = d_salaire.id_salaire 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres  
        WHERE titre LIKE "%{job}%"
        GROUP BY nom_departement 
        HAVING Salaire < 150000 AND Salaire > 10000
        ORDER BY Salaire DESC;"""
        salaire_dep = pd.read_sql_query(query, conn)
        container.write(f":red[**_Salaire moyen d'un {job.lower()} par d√©partement_**]")
        container.bar_chart(data=salaire_dep, 
                            x='Departement', y='Salaire', 
                            color='#FFA07A', 
                            use_container_width=True, height=500) 
    
    # Onglet 3 - Contrats :
    with tab3:
        requete = """SELECT COUNT(profil) as Nombre, titre as Offres FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        GROUP BY Offres 
        ORDER BY Nombre DESC;"""
        position = pd.read_sql_query(requete, conn)
        jobs = ["Data analyst", "Data scientist", "Data engineer", "Data manager", "Data steward", "Ml engineer"]

        job = st.selectbox("**_Quel poste souhaitez-vous afficher pour l'onglet 'Contrats' ?_**", jobs)
        st.subheader('**_En France_**')
        st.write("**_Ici, vous pouvez retrouver les donn√©es li√©es aux diff√©rents types de contrats selon le poste s√©lectionn√©._**")
        container = st.container(border=True)
        col1, col2 = container.columns([1,2])
        with col1:
            st.write(':red[**_Types de contrats (global)_**]')
            # Requ√™te sur le nombre d'offres par type de contrat :
                # le type de contrat doit √™tre diff√©rent de "Paris" et "Paris, France"
            query = """SELECT COUNT(titre) as Offres, type_contrat as Contrat FROM f_offres
            INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres
            INNER JOIN d_contrat ON f_offres.id_contrat = d_contrat.id_contrat
            WHERE type_contrat NOT IN ('Paris, France', 'Paris')
            GROUP BY type_contrat 
            ORDER BY Offres DESC;"""
            contrat_global = pd.read_sql_query(query, conn)
            st.dataframe(contrat_global, hide_index=True, use_container_width=True)
        with col2:
            st.write(f':red[**_Types de contrats pour le poste de {job.lower()} :_**]')
            # Requ√™te sur le nombre d'offres en France par type de contrat selon le poste s√©lectionn√© :
                # le type de contrat doit √™tre diff√©rent de "Paris" et "Paris, France"
                # ce n'est pas pertinent de regarder les diff√©rents types de contrats hors France, les appellations ne sont pas les m√™mes
            query = f"""SELECT COUNT(titre) as Offres, type_contrat as Contrat, pays as Pays FROM f_offres 
            INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
            INNER JOIN d_contrat ON f_offres.id_contrat = d_contrat.id_contrat 
            INNER JOIN d_geo ON f_offres.id_geo = d_geo.id_geo 
            WHERE pays = "France" AND titre LIKE "%{job}%"  AND type_contrat NOT IN ('Paris, France', 'Paris')
            GROUP BY type_contrat;"""
            contrat_pays = pd.read_sql_query(query, conn)
            custom_colors = ['#641e16', '#922b21', '#c0392b', '#F08080', '#E9967A', '#FA8072', '#FFA07A']
            # Donut de la requ√™te :
            fig = px.sunburst(contrat_pays, path=["Pays", "Contrat"], values="Offres",
                                color_discrete_sequence=custom_colors)
            st.plotly_chart(fig, use_container_width=True) # affichage du donut
    
    # Onglet 4 - Exp√©rience :
    with tab4:
        requete = """SELECT COUNT(profil) as Nombre, titre as Offres FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        GROUP BY Offres 
        ORDER BY Nombre DESC;"""
        position = pd.read_sql_query(requete, conn)
        jobs = ["Data analyst", "Data scientist", "Data engineer", "Data manager", "Data steward", "Ml engineer"]
        job = st.selectbox("""**_Quels postes souhaitez-vous afficher pour l'onglet 'Exp√©rience' ?_**""", 
                           jobs)
        
        st.subheader('**_Exp√©rience Requise_**')
        st.write("""**_Ici, vous pouvez retrouver le niveau d\'exp√©rience requise (en ann√©es, si disponible), 
                 et si les d√©butants sont accept√©s ou non pour le ou les postes s√©lectionn√©s._**""")
        
        container = st.container(border=True)
        container.write(':red[**_R√©partition des niveaux d\'exp√©rience (global)_**]')
        # Requ√™te sur le nombre d'offres par niveau d'exp√©rience (d√©butant vs. exp√©rience exig√©e vs. non sp√©cifi√©) :
        query = """SELECT COUNT(titre) as Offres, debutant_acceptee as Experience, annee_exper as Annee FROM f_offres
        INNER JOIN d_experience ON f_offres.id_experience = d_experience.id_experience
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres
        GROUP BY Experience 
        ORDER BY Offres DESC;"""
        exp = pd.read_sql_query(query, conn)
        custom_colors = ['#900C3F', '#f5b7b1', '#CD5C5C', '#FFA07A']
        # Camembert de la requ√™te :
        fig = px.pie(exp, names='Experience', values='Offres', 
                     color='Offres', 
                     color_discrete_sequence = custom_colors)
        container.write(fig)
        #container.dataframe(exp, hide_index=True, use_container_width=True)

        container.divider()

        container.write(f":red[**_R√©partition des niveaux d'exp√©rience pour le poste de {job.lower()} :_**]")
        # Requ√™te sur le nombre d'offres par niveau d'exp√©rience selon le poste s√©lectionn√© par l'utilisateur :
        query = f"""SELECT COUNT(titre) as Offres, debutant_acceptee as Experience, annee_exper as Annee FROM f_offres
        INNER JOIN d_experience ON f_offres.id_experience = d_experience.id_experience
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        WHERE titre LIKE "%{job}%"
        GROUP BY Experience 
        ORDER BY Offres DESC;"""
        exp = pd.read_sql_query(query, conn)
        custom_colors = ['#900C3F', '#f5b7b1', '#CD5C5C', '#FFA07A']
        fig = px.pie(exp, names='Experience', values='Offres', 
                     color='Offres', 
                     color_discrete_sequence = custom_colors)
        container.write(fig)

        container.write(f":red[**_Nombre d'ann√©es requises (quand requises) pour le poste de {job.lower()} :_**]")
        # Requ√™te sur le nombre d'offres par ann√©e d'exp√©rience requise selon le poste s√©lectionn√© par l'utilisateur :
        query = f"""SELECT COUNT(titre) as Offres, annee_exper as Annee, debutant_acceptee as Experience FROM f_offres
            INNER JOIN d_experience ON f_offres.id_experience = d_experience.id_experience
            INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
            WHERE titre LIKE "%{job}%" AND debutant_acceptee = "Experience Exig√©e" AND Annee >= 1
            GROUP BY Annee 
            ORDER BY Offres DESC;"""
        exp_deb = pd.read_sql_query(query, conn)
        custom_colors = ['#900C3F', '#f5b7b1', '#CD5C5C', '#FFA07A']
        fig=px.bar(exp_deb, 
                   x='Annee', y='Offres', 
                   color_discrete_sequence = custom_colors, 
                   width=600)
        container.write(fig)
        
        container.caption("_Il est possible que certaines informations li√©es √† l'exp√©rience soient manquantes._")

    # Onglet 5 - Cartographie :
    with tab5:
        container = st.container(border=True)
        container.subheader(":red[**_Cartographie des offres_**]")
        container.write("**_Le nombre d'offres par r√©gion :_**")
        # Requ√™te du nombre d'offres par r√©gion :
        query = """SELECT COUNT(titre) as Offres, nom_region as Region FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres=d_offres.id_offres 
        INNER JOIN d_geo ON f_offres.id_geo=d_geo.id_geo 
        GROUP BY nom_region ORDER BY Region DESC;"""
        map_region = pd.read_sql_query(query, conn)
        # Cr√©ation de la carte des r√©gions :
        with open("regions.json", "r", encoding="utf-8") as file:
            regions_data = json.load(file) # on r√©cup√®re le fichier json des coordonn√©es des r√©gions fran√ßaises

        fig_region = px.choropleth(
            map_region,  # notre df
            geojson=regions_data,
            locations='Region',  # noms des r√©gions
            color='Offres',  # valeurs s√©lectionn√©es pour colorer chaque r√©gion
            color_continuous_scale='YlOrRd',
            featureidkey="properties.libgeo"  # chemin vers les id's du geojson
        )

        #fig_region.update_layout(width=800, height=700)

        # On veut uniquement la carte de la France :
        fig_region.update_geos(
            center={"lat": 45.8, "lon": 1.888334},  # coordonn√©es des centro√Ødes fran√ßais
            projection_scale=17,  # ajustement de l'√©chelle pour n'afficher que la France
            visible=False  # dissimulation des contours de la carte
        )
        container.plotly_chart(fig_region, use_container_width=True) # affichage de la carte cr√©√©e pr√©c√©demment
        container.divider()

        container.write('**_Le nombre d\'offres par d√©partement :_**')
        # Requ√™te du nombre d'offres par d√©partement :
        query = """SELECT COUNT(titre) as Offres, nom_departement as Departement FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres=d_offres.id_offres 
        INNER JOIN d_geo ON f_offres.id_geo=d_geo.id_geo 
        GROUP BY nom_departement ORDER BY Departement DESC;"""
        map_dep = pd.read_sql_query(query, conn)
        
        with open("departement.json", "r",encoding="utf-8") as file:
            dep_data = json.load(file)
        
        fig_dep = px.choropleth(
            map_dep,  
            geojson=dep_data,
            locations='Departement',  
            color='Offres',  
            color_continuous_scale='YlOrRd',
            featureidkey="properties.libgeo" 
        )

        #fig_dep.update_layout(width=800, height=700)

        fig_dep.update_geos(
            center={"lat": 45.8, "lon": 1.888334},  
            projection_scale=17,  
            visible=False  
        )
        container.plotly_chart(fig_dep, use_container_width=True)
        container = st.container(border=True)
        container.subheader(":red[**_Cartographie des salaires_**]")
        container.write('**_Les salaires moyens par r√©gion :_**')
        # Requ√™te sur le salaire moyen par r√©gion :
        query = """SELECT AVG(salaire_moyen) as Salaire, nom_region as Region, titre as Offres FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres 
        INNER JOIN d_salaire ON f_offres.id_salaire = d_salaire.id_salaire 
        INNER JOIN d_geo ON f_offres.id_geo=d_geo.id_geo 
        GROUP BY nom_region ORDER BY Region DESC;"""
        map_region = pd.read_sql_query(query, conn)
        
        with open("regions.json", "r",encoding="utf-8") as file:
            regions_data = json.load(file)

        fig_region = px.choropleth(
            map_region,  
            geojson=regions_data,
            locations='Region',  
            color='Salaire',  
            color_continuous_scale='YlOrRd',
            featureidkey="properties.libgeo"  
        )

        #fig_region.update_layout(width=800, height=700)

        fig_region.update_geos(
            center={"lat": 45.8, "lon": 1.888334},  
            projection_scale=17,  
            visible=False  
        )
        container.plotly_chart(fig_region, use_container_width=True)

        container.divider()

    # Onglet 6 - Wordcloud :
    with tab6:
        jobs = ['M√©tiers de la data', 'Data Analyst', 'Data Scientist', 'Data Steward', 'ML Engineer', 'Data Engineer'] # liste des postes que l'utilisateur peut s√©lectionner

        job = st.selectbox("**_Quel poste souhaitez-vous afficher pour l'onglet 'Wordcloud' ?_**", jobs)
        job_min = job.lower()
        st.subheader('**_Nuage de mots_**')
        st.write(f':red[**_Voici les termes les plus fr√©quents dans les offres de "{job_min}" :_**]')

        # Nuage de mots pour chaque poste de la liste cr√©√©e pr√©c√©demment :
        if job_min == "data analyst" :
            st.image('wordcloud_data_analyst.png', 
                            caption="Nuage de mots - Data Analyst")
        
        elif job_min == "data scientist":
            st.image('wordcloud_data_scientist.png', 
                            caption="Nuage de mots - Data Scientist")
        
        elif job_min == "data steward":
            st.image('wordcloud_data_steward.png', 
                            caption="Nuage de mots - Data Steward")

        elif job_min == "ml engineer":
            st.image('wordcloud_ml_engineer.png', 
                            caption="Nuage de mots - ML Engineer")

        elif job_min == "data engineer":
            st.image('wordcloud_data_engineer.png', 
                            caption="Nuage de mots - Data Engineer")
        
        else:
            st.image('wordcloud_tout.png', 
                            caption='Nuage de mots (global)')

# Si la page "ü§ñ Les offres" est cliqu√©e :
elif mainmenu == 'ü§ñ Les offres':
    # On indique le LLM que nous allons choisir
    repo_id = "mistralai/Mixtral-8x7B-Instruct-v0.1"

    st.title('üíª Les offres de la data')

    # On v√©rifie que la cl√© d'acc√®s Huggingface a bien √©t√© indiqu√© (et son format)
    if not hf_api_key.startswith('hf_') and len(hf_api_key) != 37:
        st.warning('Entrez une ü§ó HuggingFace API key!', icon='‚ö†Ô∏è')
    else:
        st.success("Thanks for the key! ", icon='ü§ñ')

    # On cr√©e une liste de m√©tiers que l'utilisateur peut cliquer
    job_options = ['Data Analyst', 'ML Engineer', 'Data Scientist', 'Data Engineer']
    selected_job = st.radio('Quel emploi?', job_options)
    # On propose √©galement la possibilit√© de pouvoir l'√©crire
    st.markdown("Ton m√©tier de r√™ve ne se trouve pas dans la liste? Ecris le pour voir si des offres existes ! ")
    custom_job = st.text_input('Entre le m√©tier de tes r√™ves: (Attention, tant que des termes seront pr√©sent ici, vous ne pourrez pas choisir un m√©tier de la liste en haut.)')

    # On indique le m√©tier choisi actuellement pour tracer un possible changement
    if 'last_job_search' not in st.session_state:
        st.session_state.last_job_search = None

    # Si l'utilisateur a rentr√© un input tex, celui ci prend la priorit√© sur la liste pr√©-√©tabli
    if custom_job:
        job_to_search = custom_job.lower()
    elif selected_job:
        job_to_search = selected_job.lower()
    else:
        job_to_search = None

    # On r√©initialise la page si la recherche a chang√©
    if job_to_search != st.session_state.last_job_search:
        st.session_state.page = 0
        st.session_state.last_job_search = job_to_search

    con = sqlite3.connect('joboffers_dw.db') # Connexion √† une base de donn√©es SQL cr√©√©e pr√©alablement

    # On r√©alise une requ√™te SQL qui s'adapte au m√©tier recherch√©.
    if job_to_search:
        like_clauses = " OR ".join(f"titre LIKE '%{job}%'" for job in job_to_search)
        query = f"""
        SELECT titre, profil, descriptif, source, date_complete, entreprise
        FROM f_offres 
        INNER JOIN d_offres ON f_offres.id_offres = d_offres.id_offres
        INNER JOIN d_source ON f_offres.id_source = d_source.id_source
        INNER JOIN d_temps ON f_offres.id_temps = d_temps.id_temps
        INNER JOIN d_entreprise ON f_offres.id_entreprise = d_entreprise.id_entreprise
        WHERE titre LIKE "%{job_to_search}%"
        ORDER BY date_complete DESC;
        """
    else:
        st.write("Please select or enter a job position.")

    # On r√©alise la requ√™te SQL en ins√©rer un try/except loop pour bloquer au cas o√π il y aurait une erreur (m√©tier non retrouv√©)
    try: 
        offres_df = pd.read_sql_query(query, con)   
        offres_df = offres_df.drop_duplicates()
        # S'il existe au moins une offre
        if offres_df.shape[0] > 0: 
            if 'page' not in st.session_state:
                # On indique que l'on est sur la premi√®re page
                st.session_state.page = 0

            # On cr√©e des boutons pr√©c√©dent et suivant pour naviguer entre les offres
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                btn_prev, btn_next = st.columns(2)  # Deux colonnes pour les boutons
            # Si le bouton "pr√©c√©dent est cliqu√©",
            with btn_prev:
                if st.button('Pr√©c√©dent', type="primary"):
                    if st.session_state.page > 0: # Tant que la page est sup√©rieur √† 0 (pour rester dans la plage possible d'index)
                        st.session_state.page -= 1 # On diminue l'index de 1
                        st.session_state.messages = [] # On r√©initialise les messages du chabtot
            # Si le bouton "suivant" est cliqu√©,
            with btn_next:
                if st.session_state.page != offres_df.shape[0]:
                    if st.button('Suivant', type="primary"):
                        if st.session_state.page < offres_df.shape[0] - 1: # Tant que l'on est pas sur la derni√®re page (les index commen√ßant √† 0)
                            st.session_state.page += 1 # On augmente l'index de 1
                            st.session_state.messages = []

            # Afficher les donn√©es de l'offre actuelle
            offre_display = offres_df.iloc[st.session_state.page, :]
            st.header(offre_display["titre"])
            st.markdown("**Source de l'offre:** " + offre_display["source"])
            st.markdown("**Date de publication:** " + offre_display["date_complete"])
            st.markdown("**Entreprise:** " + offre_display["entreprise"])
            st.markdown(offre_display["descriptif"])

            # Affichage du profil conditionnel √† sa pr√©sence pour ne pas d√©naturer l'affichage
            if "Non sp√©cifi√©" not in offre_display["profil"]:
                st.markdown("Profil " + offre_display["profil"])
            
            # PARTIE CHATBOT ############################
            st.title("Avez-vous des questions sur l'offre?")
            texte_orange = "<p style='color: #f06f05; font-weight: bold;'> Mixtral est l√† pour toi!  Pensez √† r√©initialiser le chat entre les annonces!</p>"
            st.markdown(texte_orange, unsafe_allow_html=True)
            # Affichage conditionnel √† la pr√©sence de la cl√© d'acc√®s huggingface
            if hf_api_key.startswith('hf_') and len(hf_api_key) == 37:
                # Connexion avec le LLM
                llm = HuggingFaceHub(
                repo_id=repo_id,
                huggingfacehub_api_token=hf_api_key,
                model_kwargs={"temperature": 0.2, "max_new_tokens": 500}) # On indique certains param√®tres (temperature [0/1]: ajout d'al√©atoire, nbre de tokens par r√©ponse)
                
                # On cr√©e un document avec le titre, le descriptif et le profil requis de l'offre
                current_joboffer = offre_display["titre"] + offre_display["descriptif"] + offre_display["profil"]

                # On initialise le chat
                if "messages" not in st.session_state:
                    st.session_state.messages = []
                
                # On affiche les messsages de l'utilisateur et de l'IA entre chaque message
                for message in st.session_state.messages:
                    with st.chat_message(message["role"]):
                        st.markdown(message["content"])

                # Si pr√©sence d'un input par l'utilisateur,
                if prompt := st.chat_input(""):
                    if prompt.strip(): 
                        # On affiche le message de l'utilisateur
                        with st.chat_message("user"):
                            st.markdown(prompt)
                        # On ajoute le message de l'utilisateur dans l'historique de la conversation
                        st.session_state.messages.append({"role": "user", "content": prompt})
                        # On r√©cup√®re la r√©ponse du chatbot √† la question de l'utilisateur
                        response = chat_response_generation(llm=llm, query=prompt, joboffer=current_joboffer, history = st.session_state.messages)
                    # On affiche la r√©ponse du chatbot
                        with st.chat_message("assistant"):
                            st.markdown(response)
                    # On ajoute le message du chatbot dans l'historique de la conversation
                        st.session_state.messages.append({"role": "assistant", "content": response})
                # On ajoute un bouton pour r√©initialiser le chat 
                if st.button("R√©initialiser le Chat", type="primary"):
                    st.session_state.messages = []
            else:
                st.error("Veuillez entrer la cl√© d'acc√®s HuggingFace pour afficher le chatbot")
        else: 
            st.markdown("Il n'y a pas d'offres pour ce m√©tier.")
    except: 
        st.warning("Nous ne trouvons pas ce m√©tier dans notre base de donn√©es. Essayez un autre!")

# Si la page "ü§ñ Q/Abot" est cliqu√©e :
elif mainmenu == 'ü§ñ Q/Abot':
    
    # On connecte la base de donn√©e avec notre Q/Abot
    db = SQLDatabase.from_uri("sqlite:///joboffers_dw.db")
    
    # On indique le mod√®le de LLM
    repo_id = "mistralai/Mixtral-8x7B-Instruct-v0.1"

    st.title('Chatbot üó£Ô∏è')
    st.toast('Here you can chat with Oliver')
    st.markdown("Bienvenue dans la partie 2.0 de notre application ! A votre tour d'√™tre cr√©atif et de poser les questions qui vous tarodent! ")
    st.markdown("Vous √™tes mis en contact avec notre LLM fran√ßais: Mixtral-8x7B !")

    # On affiche le Q/Abot qu'√† la pr√©sence de la cl√© d'acc√®s respectant le format requis
    if hf_api_key.startswith('hf_') and len(hf_api_key) == 37:
        st.header("Notre module de Question/R√©ponse")
        # On cr√©e un formulaire d'envoie
        with st.form('my_form'):
            query = st.text_area('Quelle est votre question?', '')

            if not hf_api_key.startswith('hf_') and len(hf_api_key) != 37:
                    st.warning('Entrez une ü§ó HuggingFace API key!', icon='‚ö†Ô∏è')
            else:
                    st.success("Thanks for the key! ", icon='ü§ñ')
            
            # On cr√©e un bouton pour envoyer la question
            submitted = st.form_submit_button('Submit')
            # Si le bouton est cliqu√©,
            if submitted:
                # Si la question n'est pas vide,
                if len(query) == 0:
                    st.error("Attention votre requ√™te est vide !")
                else:
                    try:
                        # On se connecte au LLM
                        llm = HuggingFaceHub(
                            repo_id=repo_id,
                            huggingfacehub_api_token=hf_api_key,
                            model_kwargs={"temperature": 0.2, "max_new_tokens": 400}
                        )
                        # On r√©cup√®re la r√©ponse √† la question
                        result = SQLquery2(query=query, llm=llm, db=db,verbose=True)
                        print(f'Sortie: {result}')
                        # On affiche la r√©ponse
                        st.markdown(result)
                    except Exception as e:
                        # On renvoie un message d'erreur si le Q/Abot n'a pas pu r√©pondre (question trop complexe ou non pr√©sente dans la base de donn√©e)
                        st.error('Je n\'ai pas r√©ussi √† r√©pondre a votre question...', icon="üö®")
                        st.text("1) V√©rifiez que votre cl√© API est correcte; 2) Essayez de reformuler votre r√©ponse pour qu'elle soit plus claire")
                
            
        st.markdown("Je ne suis qu'un ChatBot √©tudiant, je n'ai pas encore √©t√© dop√© ! Mes r√©ponses peuvent tarder jusqu'√† 20-30 secondes, soyez patient!\
                     Plus vous serez clair dans votre question, plus je serais rapide et plus je serais √©galement pr√©cis dans ma r√©ponse. N'h√©sitez pas √† reformuler vos questions ou les rendre plus d√©taill√©, surtout les plus complexes.")
        st.markdown("Attention, la base de donn√©e contient le d√©partement et la r√©gion de l'offre (pas la ville). Elle r√©pondra donc toujours sur le d√©partement ou la r√©gion de la ville si cette derni√®re est pr√©cis√©e.")
        st.markdown("**Exemple de questions:**")
        st.caption('Le salaire d\'un data analyst est il plus √©lev√© √† Paris ou Lyon?')
        st.caption('Quel est le nombre d\'offres de data scientist √† Lyon?')
        st.caption("Existe-t-il des offres de stage √† Lille?")
    else: 
        st.error("Veuillez rentrer une cl√© d'acc√®s HuggingFace pour pouvoir faire appara√Ætre le Q/Abot.")    

elif mainmenu == 'R√®gles d\'utilisation IA':
    st.header("Quelques r√®gles d'utilisation:")
    st.markdown("""
                - Pour pouvoir utiliser cette partie, il est n√©cessaire d'avoir cr√©er un compte HuggingFace et d'avoir g√©n√©r√© une cl√© API \
                pour pouvoir connecter Mixtral avec l'application. Voici un petit tutoriel: https://huggingface.co/docs/api-inference/quicktour#get-your-api-token \
                """)
    st.markdown("""
                - Le mod√®le large de langage (LLM) avec lequel vous int√©ragissez peut se tromper ou mal interpr√©ter votre question. Soyez le plus pr√©cis et concis possible. Si le mod√®le renvoie une erreur, \
                pas de panique! Essayez simplement de reformuler votre question ou votre phrase.
                """)
    st.markdown("""
                - Une absence de r√©ponse peut √™tre du √† l'absence de la r√©ponse dans notre base d'information. 
                """)
    st.markdown("""
                - Plus la question est complexe, plus elle sera dur et risque de lui prendre du temps √† interpr√©ter. Ne soyez pas trop exigent avec lui, il fait de son mieux !! 
                """)
    st.markdown("""
                - Un comportement √©thique est attendu quand vous int√©ragissez avec lui.
                """)